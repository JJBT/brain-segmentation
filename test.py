from monai import transforms


def test_wandb():
    import wandb
    # wandb.init(project="test")
    import os
    print(os.environ['WANDB_MODE'])


def test_transform():
    path_to_data = '/Users/vladimir/dev/data/msd/Task01_BrainTumour/imagesTr/BRATS_001.nii.gz'
    transform1 = transforms.LoadImage()
    output = transform1(path_to_data)
    print(output[0].shape)
    transform2 = transforms.AsChannelFirst()
    output1 = transform2(output[0])
    print(output1.shape)
    modality = [0, 1, 2, 3]
    transform3 = transforms.Lambda(func=lambda x: x[modality])
    output2 = transform3(output1)
    print(output2.shape)
    # transform4 = transforms.AddChannel()
    # output3 = transform4(output2)
    # print(output3.shape)
    spacing = [1.0, 1.0, 1.0]
    transform5 = transforms.Spacing(pixdim=spacing, mode='bilinear')
    output4 = transform5(output2)
    print(output4.shape)
    transform6 = transforms.ScaleIntensity()
    output5 = transform6(output4)
    print(output5.shape)
    transform7 = transforms.CropForeground()
    output6 = transform7(output5)
    print(output6.shape)


def test_mean():
    s = []
    s.append([0.9958155000962439, 0.9001585490538918, 0.6183284083032359, 0.9196977305880384])
    s.append([0.9980167027067975, 0.8857644609396216, 0.7457569069183347, 0.8084843058773963])
    s.append([0.9972867197813853, 0.8443073965800328, 0.5935751669373759, 0.9083987186034634])
    s.append([0.9992532566134237, 0.8974099368591573, 0.707332101047443, 0.9144946945503245])
    s.append([0.9922065253063069, 0.7842821737144059, 0.12302204682578834, 0.5229033990639147])
    s.append([0.9978754554528073, 0.7740247041398847, 0.693267776096823, 0.9290044983375709])
    s.append([0.9963127255411222, 0.7133403643733068, 0.8917499295786316, 0.923831930599012])
    s.append([0.9984663755239279, 0.872958460735327, 0.3093316112366807, 0.8863473053892216])
    s.append([0.9989851628923866, 0.7291894456707858, 0.38635793697233134, 0.054613935969868174])
    s.append([0.9983125108009474, 0.674961338394489, 0.5098039215686274, 0.9070294784580499])
    s.append([0.9947656371027093, 0.8319654194245576, 0.6614820393595076, 0.7841882512273574])
    s.append([0.9980203479121653, 0.325678496868476, 0.585200446390248, 0.8711305518169583])
    s.append([0.9982591860039357, 0.6071986936733489, 0.7742510377188233, 0.7040319007532122])
    s.append([0.998262534245989, 0.8078311928910101, 0.6074354127284184, 0.8132857364581717])
    s.append([0.9982121091534621, 0.8212226733517317, 0.39181095502559077, 0.9154282798647873])
    s.append([0.9988429794091996, 0.8981760456150581, 0.44177029014574143, 0.6684303350970018])
    s.append([0.9954691684075797, 0.4045790652801699, 0.7258407380638578, 0.5671668241965974])
    s.append([0.9974046107306263, 0.9227842628620839, 0.5799593771157752, 0.8880488514102937])
    s.append([0.9986542635463558, 0.6653929616001509, 0.3674390610893771, 0.37628865979381443])
    s.append([0.9981528506302403, 0.8410778026976656, 0.36001736218763564, 0.8840927258193445])
    s.append([0.9976142078073829, 0.7896123734962764, 0.814493735184558, 0.8924018530416258])
    s.append([0.9989158892004583, 0.8167797427056687, 0.8013637711236288, 0.823789764868603])
    s.append([0.9950478809040755, 0.8318275383039779, 0.41979868870625175, 0.6923076923076923])
    s.append([0.99851705175583, 0.7776135261237123, 0.20473436935309, 0.4708860759493671])
    s.append([0.9973252859800733, 0.7037788996195493, 0.23768345894486315, 0.8024212617043412])
    s.append([0.9987848837383222, 0.8477302313862176, 0.11262135922330097, 0.7321250178393035])
    s.append([0.9960938958671626, 0.7986077225854722, 0.9069386822974156, 0.8971800702275434])
    s.append([0.997278347252311, 0.913692206332597, 0.7302609512309653, 0.8980024855263556])
    s.append([0.9950635808166843, 0.8516169350783686, 0.6823466938080118, 0.8942583673117431])
    s.append([0.9964487514223452, 0.8555443393159615, 0.5198177453333986, 0.7846231892227045])
    s.append([0.9995584311667194, 0.6474891918856003, 0.2857644991212654, 0.4457831325301205])
    s.append([0.997481126676363, 0.9011559157642994, 0.4537112627763446, 0.8293928293928294])
    s.append([0.9927789963590291, 0.7666446092942801, 0.6087577556577244, 0.8688484184581678])
    s.append([0.9953488672224705, 0.7648706202057718, 0.7397571073403201, 0.7196005267778753])
    s.append([0.9987775797225421, 0.7254102160007416, 0.06850828729281767, 0.6100508905852418])
    s.append([0.9984491561476275, 0.9105369948732246, 0.33249791144527985, 0.8988085388052292])
    s.append([0.9947923237909162, 0.6930015391626612, 0.8069882659713168, 0.8060192805078767])
    s.append([0.997239442049097, 0.8743539647555894, 0.3976965448172258, 0.9103957933631777])
    s.append([0.9977412828178589, 0.8194850489818947, 0.7915980230642504, 0.8478340154800016])
    s.append([0.9980953509254602, 0.24694203155468888, 0.5870631514408339, 0.6298767658551248])
    s.append([0.9950817858809754, 0.6908991487349255, 0.5983031699938587, 0.6848069832192039])
    s.append([0.995071623896822, 0.8210160093501128, 0.4040384428696243, 0.6702819956616052])
    s.append([0.9982400119940386, 0.8882477517571591, 0.5896142024863525, 0.7818947823268878])
    s.append([0.998537763838264, 0.7884353639749323, 0.4353275691986305, 0.8660830090791181])
    s.append([0.9947198338091701, 0.8760922455813224, 0.43882362134986586, 0.8534248884937847])
    s.append([0.9984894567816642, 0.7494040856334514, 0.7711651299245599, 0.798508125388509])
    s.append([0.9989423790252447, 0.8347307035284416, 0.8831041738024172, 0.9582212918012669])
    s.append([0.995808256217208, 0.8847056540833803, 0.7452168971396098, 0.9330042992924483])
    s.append([0.9944701025385635, 0.7815524934694444, 0.5501772550784987, 0.8594019040853673])
    s.append([0.9985338216416924, 0.8325798655028616, 0.6804389928986443, 0.8640298760821592])
    s.append([0.9978087144262949, 0.9132584955313442, 0.23254857612830265, 0.3250883392226148])
    s.append([0.9983820189941404, 0.8909678837158196, 0.7071283612379503, 0.9576425578429586])
    s.append([0.9916908426269793, 0.3998927452196209, 0.2125748502994012, 0.7625214244905733])
    s.append([0.9956571059649634, 0.8622189992748368, 0.3186880365733727, 0.8424484520942255])
    s.append([0.9979692843826173, 0.7887898089171974, 0.7507650100242693, 0.9380333750067946])
    s.append([0.9970729121134053, 0.7711126133595235, 0.45713864524213166, 0.7914213103576521])
    s.append([0.9965395401112228, 0.7965649285434244, 0.6307392996108949, 0.9129437811338658])
    s.append([0.9964972282287803, 0.6016241990761436, 0.5669535598065752, 0.7256296776884399])
    s.append([0.996526894360761, 0.5132308693177198, 0.7994228800148934, 0.676860512403416])
    s.append([0.9969624254314542, 0.6291734197730956, 0.02926829268292683, 0.35328753680078506])
    s.append([0.9968559430826552, 0.8592684691662505, 0.6064457873168021, 0.7658045130501384])
    s.append([0.9965593174706422, 0.7720420767169144, 0.2168392264114085, 0.8068953421362531])
    s.append([0.9984521194261672, 0.7677371357718537, 0.6472252790441755, 0.9012198189134809])
    s.append([0.9944740858736614, 0.5841009670545813, 0.8202863285611907, 0.87362526859526])
    s.append([0.9955105982149952, 0.6107071229067464, 0.7623784761474113, 0.0])
    s.append([0.9961525119446674, 0.7693514058474291, 0.7781063373340291, 0.7961881209226964])
    s.append([0.992591849004188, 0.8156187747979124, 0.39528077977740395, 0.7678152836380685])
    s.append([0.9989140597325219, 0.6338532767458523, 0.16453570967325326, 0.8849483149844525])
    s.append([0.9975925800398744, 0.8513294220446885, 0.203707781055969, 0.33669511249030254])
    s.append([0.9979538229293335, 0.8267351744808392, 0.242220622350212, 0.6955349620893008])
    s.append([0.9981320231146539, 0.6967855651931908, 0.10311085146779611, 0.6714020605362514])
    s.append([0.9960452406735439, 0.8749995824076703, 0.06375787371332002, 0.009531374106433678])
    s.append([0.9988026838953037, 0.8645608739399167, 0.39062290689886137, 0.9497272247316243])
    s.append([0.9971315430991723, 0.6784956888644286, 0.26768279124300065, 0.7694620835266079])
    s.append([0.99529883485206, 0.8114550217826445, 0.38798549974106683, 0.856553117360308])
    s.append([0.9915374012773595, 0.6274441449461214, 0.274350559047672, 0.16062756817332835])
    s.append([0.9984801622080607, 0.6466574138329864, 0.7840134374073708, 0.8485261388926738])
    s.append([0.9966529217547032, 0.8386419058338023, 0.6818494055482166, 0.8666393945592146])
    s.append([0.9979438304002723, 0.649130508188418, 0.9317333871130382, 0.8656942991363571])
    s.append([0.9972573665950621, 0.8561292303643103, 0.6665956804912243, 0.7594426183226118])
    s.append([0.9937536193938787, 0.8950825201343658, 0.45006895645892164, 0.8563381391318049])
    s.append([0.9956535516665519, 0.8865437574891211, 0.5567010309278351, 0.7670882841446276])
    s.append([0.991585551877572, 0.5850888634177832, 0.33107280288519614, 0.7828541852914883])
    s.append([0.9978551030382197, 0.7180766197803004, 0.27396616541353386, 0.8032490974729242])
    s.append([0.9984356292231549, 0.7532467532467533, 0.6182688472277623, 0.8456061547283413])
    s.append([0.9986176080430077, 0.8060329825142952, 0.5171570443933892, 0.9280078093223786])
    s.append([0.9978326268364608, 0.8415690617147238, 0.697097835122339, 0.8638876700307152])
    s.append([0.9982317646690166, 0.7899240760618027, 0.6538686578808057, 0.9470523154733681])
    s.append([0.9953877826534897, 0.8808516495457772, 0.130522538685804, 0.7756604021553424])
    s.append([0.9985220310861194, 0.5501938819474365, 0.7124496451179743, 0.0])
    s.append([0.9972818642082915, 0.8791213962045746, 0.7208096436967504, 0.9270877322635135])
    s.append([0.9991880538431864, 0.8222727492622515, 0.4156859708888201, 0.9415909653583195])
    s.append([0.9985271001544139, 0.9084256773980717, 0.5845344028073693, 0.9451611675609849])
    s.append([0.9956822955869834, 0.8423983941927791, 0.5496398451718746, 0.8746645574983758])
    s.append([0.9983505452221223, 0.6090281818937567, 0.010844093185682122, 0.876072490644609])

    import numpy as np
    print(len(s), len(s[0]))
    print(np.mean(s, axis=0))

if __name__ == '__main__':
    test_mean()
    # test_transform()
    # test_wandb()
